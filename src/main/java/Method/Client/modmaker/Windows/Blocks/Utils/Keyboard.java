package Method.Client.modmaker.Windows.Blocks.Utils;

import Method.Client.modmaker.BlockObjects;
import Method.Client.modmaker.MainBlockType;
import Method.Client.modmaker.Tabs;
import Method.Client.modmaker.Windows.Block;
import Method.Client.modmaker.Windows.DragableBlock;

import static org.lwjgl.input.Keyboard.*;

public class Keyboard extends Block {

    public Keyboard() {
        super("Keyboard", MainBlockType.Boolean, Tabs.Utils, BlockObjects.Name, BlockObjects.DropDown);
        ddOptions.add("KEY_ESCAPE");
        ddOptions.add("KEY_1");
        ddOptions.add("KEY_2");
        ddOptions.add("KEY_3");
        ddOptions.add("KEY_4");
        ddOptions.add("KEY_5");
        ddOptions.add("KEY_6");
        ddOptions.add("KEY_7");
        ddOptions.add("KEY_8");
        ddOptions.add("KEY_9");
        ddOptions.add("KEY_0");
        ddOptions.add("KEY_MINUS");
        ddOptions.add("KEY_EQUALS");
        ddOptions.add("KEY_BACK");
        ddOptions.add("KEY_TAB");
        ddOptions.add("KEY_Q");
        ddOptions.add("KEY_W");
        ddOptions.add("KEY_E");
        ddOptions.add("KEY_R");
        ddOptions.add("KEY_T");
        ddOptions.add("KEY_Y");
        ddOptions.add("KEY_U");
        ddOptions.add("KEY_I");
        ddOptions.add("KEY_O");
        ddOptions.add("KEY_P");
        ddOptions.add("KEY_LBRACKET");
        ddOptions.add("KEY_RBRACKET");
        ddOptions.add("KEY_RETURN");
        ddOptions.add("KEY_LCONTROL");
        ddOptions.add("KEY_A");
        ddOptions.add("KEY_S");
        ddOptions.add("KEY_D");
        ddOptions.add("KEY_F");
        ddOptions.add("KEY_G");
        ddOptions.add("KEY_H");
        ddOptions.add("KEY_J");
        ddOptions.add("KEY_K");
        ddOptions.add("KEY_L");
        ddOptions.add("KEY_SEMICOLON");
        ddOptions.add("KEY_APOSTROPHE");
        ddOptions.add("KEY_GRAVE");
        ddOptions.add("KEY_LSHIFT");
        ddOptions.add("KEY_BACKSLASH");
        ddOptions.add("KEY_Z");
        ddOptions.add("KEY_X");
        ddOptions.add("KEY_C");
        ddOptions.add("KEY_V");
        ddOptions.add("KEY_B");
        ddOptions.add("KEY_N");
        ddOptions.add("KEY_M");
        ddOptions.add("KEY_COMMA");
        ddOptions.add("KEY_PERIOD");
        ddOptions.add("KEY_SLASH");
        ddOptions.add("KEY_RSHIFT");
        ddOptions.add("KEY_MULTIPLY");
        ddOptions.add("KEY_LMENU");
        ddOptions.add("KEY_SPACE");
        ddOptions.add("KEY_CAPITAL");
        ddOptions.add("KEY_F1");
        ddOptions.add("KEY_F2");
        ddOptions.add("KEY_F3");
        ddOptions.add("KEY_F4");
        ddOptions.add("KEY_F5");
        ddOptions.add("KEY_F6");
        ddOptions.add("KEY_F7");
        ddOptions.add("KEY_F8");
        ddOptions.add("KEY_F9");
        ddOptions.add("KEY_F10");
        ddOptions.add("KEY_NUMLOCK");
        ddOptions.add("KEY_SCROLL");
        ddOptions.add("KEY_NUMPAD7");
        ddOptions.add("KEY_NUMPAD8");
        ddOptions.add("KEY_NUMPAD9");
        ddOptions.add("KEY_SUBTRACT");
        ddOptions.add("KEY_NUMPAD4");
        ddOptions.add("KEY_NUMPAD5");
        ddOptions.add("KEY_NUMPAD6");
        ddOptions.add("KEY_ADD");
        ddOptions.add("KEY_NUMPAD1");
        ddOptions.add("KEY_NUMPAD2");
        ddOptions.add("KEY_NUMPAD3");
        ddOptions.add("KEY_NUMPAD0");
        ddOptions.add("KEY_DECIMAL");
        ddOptions.add("KEY_F11");
        ddOptions.add("KEY_F12");
        ddOptions.add("KEY_F13");
        ddOptions.add("KEY_F14");
        ddOptions.add("KEY_F15");
        ddOptions.add("KEY_F16");
        ddOptions.add("KEY_F17");
        ddOptions.add("KEY_F18");
        ddOptions.add("KEY_KANA");
        ddOptions.add("KEY_F19");
        ddOptions.add("KEY_CONVERT");
        ddOptions.add("KEY_NOCONVERT");
        ddOptions.add("KEY_YEN");
        ddOptions.add("KEY_NUMPADEQUALS");
        ddOptions.add("KEY_CIRCUMFLEX");
        ddOptions.add("KEY_AT");
        ddOptions.add("KEY_COLON");
        ddOptions.add("KEY_UNDERLINE");
        ddOptions.add("KEY_KANJI");
        ddOptions.add("KEY_STOP");
        ddOptions.add("KEY_AX");
        ddOptions.add("KEY_UNLABELED");
        ddOptions.add("KEY_NUMPADENTER");
        ddOptions.add("KEY_RCONTROL");
        ddOptions.add("KEY_SECTION");
        ddOptions.add("KEY_NUMPADCOMMA");
        ddOptions.add("KEY_DIVIDE");
        ddOptions.add("KEY_SYSRQ");
        ddOptions.add("KEY_RMENU");
        ddOptions.add("KEY_FUNCTION");
        ddOptions.add("KEY_PAUSE");
        ddOptions.add("KEY_HOME");
        ddOptions.add("KEY_UP");
        ddOptions.add("KEY_PRIOR");
        ddOptions.add("KEY_LEFT");
        ddOptions.add("KEY_RIGHT");
        ddOptions.add("KEY_END");
        ddOptions.add("KEY_DOWN");
        ddOptions.add("KEY_NEXT");
        ddOptions.add("KEY_INSERT");
        ddOptions.add("KEY_DELETE");
        ddOptions.add("KEY_CLEAR");
        ddOptions.add("KEY_LMETA");
        this.description = "Returns true if the specified key is pressed.";
    }

    @Override
    public boolean runCodeBoolean(DragableBlock dragableBlock, Object event) {
        switch (dragableBlock.dropDowns.getSelected()) {
            case "KEY_ESCAPE": return org.lwjgl.input.Keyboard.isKeyDown(KEY_ESCAPE);
            case "KEY_1": return org.lwjgl.input.Keyboard.isKeyDown(KEY_1);
            case "KEY_2": return org.lwjgl.input.Keyboard.isKeyDown(KEY_2);
            case "KEY_3": return org.lwjgl.input.Keyboard.isKeyDown(KEY_3);
            case "KEY_4": return org.lwjgl.input.Keyboard.isKeyDown(KEY_4);
            case "KEY_5": return org.lwjgl.input.Keyboard.isKeyDown(KEY_5);
            case "KEY_6": return org.lwjgl.input.Keyboard.isKeyDown(KEY_6);
            case "KEY_7": return org.lwjgl.input.Keyboard.isKeyDown(KEY_7);
            case "KEY_8": return org.lwjgl.input.Keyboard.isKeyDown(KEY_8);
            case "KEY_9": return org.lwjgl.input.Keyboard.isKeyDown(KEY_9);
            case "KEY_0": return org.lwjgl.input.Keyboard.isKeyDown(KEY_0);
            case "KEY_MINUS": return org.lwjgl.input.Keyboard.isKeyDown(KEY_MINUS);
            case "KEY_EQUALS": return org.lwjgl.input.Keyboard.isKeyDown(KEY_EQUALS);
            case "KEY_BACK": return org.lwjgl.input.Keyboard.isKeyDown(KEY_BACK);
            case "KEY_TAB": return org.lwjgl.input.Keyboard.isKeyDown(KEY_TAB);
            case "KEY_Q": return org.lwjgl.input.Keyboard.isKeyDown(KEY_Q);
            case "KEY_W": return org.lwjgl.input.Keyboard.isKeyDown(KEY_W);
            case "KEY_E": return org.lwjgl.input.Keyboard.isKeyDown(KEY_E);
            case "KEY_R": return org.lwjgl.input.Keyboard.isKeyDown(KEY_R);
            case "KEY_T": return org.lwjgl.input.Keyboard.isKeyDown(KEY_T);
            case "KEY_Y": return org.lwjgl.input.Keyboard.isKeyDown(KEY_Y);
            case "KEY_U": return org.lwjgl.input.Keyboard.isKeyDown(KEY_U);
            case "KEY_I": return org.lwjgl.input.Keyboard.isKeyDown(KEY_I);
            case "KEY_O": return org.lwjgl.input.Keyboard.isKeyDown(KEY_O);
            case "KEY_P": return org.lwjgl.input.Keyboard.isKeyDown(KEY_P);
            case "KEY_LBRACKET": return org.lwjgl.input.Keyboard.isKeyDown(KEY_LBRACKET);
            case "KEY_RBRACKET": return org.lwjgl.input.Keyboard.isKeyDown(KEY_RBRACKET);
            case "KEY_RETURN": return org.lwjgl.input.Keyboard.isKeyDown(KEY_RETURN);
            case "KEY_LCONTROL": return org.lwjgl.input.Keyboard.isKeyDown(KEY_LCONTROL);
            case "KEY_A": return org.lwjgl.input.Keyboard.isKeyDown(KEY_A);
            case "KEY_S": return org.lwjgl.input.Keyboard.isKeyDown(KEY_S);
            case "KEY_D": return org.lwjgl.input.Keyboard.isKeyDown(KEY_D);
            case "KEY_F": return org.lwjgl.input.Keyboard.isKeyDown(KEY_F);
            case "KEY_G": return org.lwjgl.input.Keyboard.isKeyDown(KEY_G);
            case "KEY_H": return org.lwjgl.input.Keyboard.isKeyDown(KEY_H);
            case "KEY_J": return org.lwjgl.input.Keyboard.isKeyDown(KEY_J);
            case "KEY_K": return org.lwjgl.input.Keyboard.isKeyDown(KEY_K);
            case "KEY_L": return org.lwjgl.input.Keyboard.isKeyDown(KEY_L);
            case "KEY_SEMICOLON": return org.lwjgl.input.Keyboard.isKeyDown(KEY_SEMICOLON);
            case "KEY_APOSTROPHE": return org.lwjgl.input.Keyboard.isKeyDown(KEY_APOSTROPHE);
            case "KEY_GRAVE": return org.lwjgl.input.Keyboard.isKeyDown(KEY_GRAVE);
            case "KEY_LSHIFT": return org.lwjgl.input.Keyboard.isKeyDown(KEY_LSHIFT);
            case "KEY_BACKSLASH": return org.lwjgl.input.Keyboard.isKeyDown(KEY_BACKSLASH);
            case "KEY_Z": return org.lwjgl.input.Keyboard.isKeyDown(KEY_Z);
            case "KEY_X": return org.lwjgl.input.Keyboard.isKeyDown(KEY_X);
            case "KEY_C": return org.lwjgl.input.Keyboard.isKeyDown(KEY_C);
            case "KEY_V": return org.lwjgl.input.Keyboard.isKeyDown(KEY_V);
            case "KEY_B": return org.lwjgl.input.Keyboard.isKeyDown(KEY_B);
            case "KEY_N": return org.lwjgl.input.Keyboard.isKeyDown(KEY_N);
            case "KEY_M": return org.lwjgl.input.Keyboard.isKeyDown(KEY_M);
            case "KEY_COMMA": return org.lwjgl.input.Keyboard.isKeyDown(KEY_COMMA);
            case "KEY_PERIOD": return org.lwjgl.input.Keyboard.isKeyDown(KEY_PERIOD);
            case "KEY_SLASH": return org.lwjgl.input.Keyboard.isKeyDown(KEY_SLASH);
            case "KEY_RSHIFT": return org.lwjgl.input.Keyboard.isKeyDown(KEY_RSHIFT);
            case "KEY_MULTIPLY": return org.lwjgl.input.Keyboard.isKeyDown(KEY_MULTIPLY);
            case "KEY_LMENU": return org.lwjgl.input.Keyboard.isKeyDown(KEY_LMENU);
            case "KEY_SPACE": return org.lwjgl.input.Keyboard.isKeyDown(KEY_SPACE);
            case "KEY_CAPITAL": return org.lwjgl.input.Keyboard.isKeyDown(KEY_CAPITAL);
            case "KEY_F1": return org.lwjgl.input.Keyboard.isKeyDown(KEY_F1);
            case "KEY_F2": return org.lwjgl.input.Keyboard.isKeyDown(KEY_F2);
            case "KEY_F3": return org.lwjgl.input.Keyboard.isKeyDown(KEY_F3);
            case "KEY_F4": return org.lwjgl.input.Keyboard.isKeyDown(KEY_F4);
            case "KEY_F5": return org.lwjgl.input.Keyboard.isKeyDown(KEY_F5);
            case "KEY_F6": return org.lwjgl.input.Keyboard.isKeyDown(KEY_F6);
            case "KEY_F7": return org.lwjgl.input.Keyboard.isKeyDown(KEY_F7);
            case "KEY_F8": return org.lwjgl.input.Keyboard.isKeyDown(KEY_F8);
            case "KEY_F9": return org.lwjgl.input.Keyboard.isKeyDown(KEY_F9);
            case "KEY_F10": return org.lwjgl.input.Keyboard.isKeyDown(KEY_F10);
            case "KEY_NUMLOCK": return org.lwjgl.input.Keyboard.isKeyDown(KEY_NUMLOCK);
            case "KEY_SCROLL": return org.lwjgl.input.Keyboard.isKeyDown(KEY_SCROLL);
            case "KEY_NUMPAD7": return org.lwjgl.input.Keyboard.isKeyDown(KEY_NUMPAD7);
            case "KEY_NUMPAD8": return org.lwjgl.input.Keyboard.isKeyDown(KEY_NUMPAD8);
            case "KEY_NUMPAD9": return org.lwjgl.input.Keyboard.isKeyDown(KEY_NUMPAD9);
            case "KEY_SUBTRACT": return org.lwjgl.input.Keyboard.isKeyDown(KEY_SUBTRACT);
            case "KEY_NUMPAD4": return org.lwjgl.input.Keyboard.isKeyDown(KEY_NUMPAD4);
            case "KEY_NUMPAD5": return org.lwjgl.input.Keyboard.isKeyDown(KEY_NUMPAD5);
            case "KEY_NUMPAD6": return org.lwjgl.input.Keyboard.isKeyDown(KEY_NUMPAD6);
            case "KEY_ADD": return org.lwjgl.input.Keyboard.isKeyDown(KEY_ADD);
            case "KEY_NUMPAD1": return org.lwjgl.input.Keyboard.isKeyDown(KEY_NUMPAD1);
            case "KEY_NUMPAD2": return org.lwjgl.input.Keyboard.isKeyDown(KEY_NUMPAD2);
            case "KEY_NUMPAD3": return org.lwjgl.input.Keyboard.isKeyDown(KEY_NUMPAD3);
            case "KEY_NUMPAD0": return org.lwjgl.input.Keyboard.isKeyDown(KEY_NUMPAD0);
            case "KEY_DECIMAL": return org.lwjgl.input.Keyboard.isKeyDown(KEY_DECIMAL);
            case "KEY_F11": return org.lwjgl.input.Keyboard.isKeyDown(KEY_F11);
            case "KEY_F12": return org.lwjgl.input.Keyboard.isKeyDown(KEY_F12);
            case "KEY_F13": return org.lwjgl.input.Keyboard.isKeyDown(KEY_F13);
            case "KEY_F14": return org.lwjgl.input.Keyboard.isKeyDown(KEY_F14);
            case "KEY_F15": return org.lwjgl.input.Keyboard.isKeyDown(KEY_F15);
            case "KEY_F16": return org.lwjgl.input.Keyboard.isKeyDown(KEY_F16);
            case "KEY_F17": return org.lwjgl.input.Keyboard.isKeyDown(KEY_F17);
            case "KEY_F18": return org.lwjgl.input.Keyboard.isKeyDown(KEY_F18);
            case "KEY_KANA": return org.lwjgl.input.Keyboard.isKeyDown(KEY_KANA);
            case "KEY_F19": return org.lwjgl.input.Keyboard.isKeyDown(KEY_F19);
            case "KEY_CONVERT": return org.lwjgl.input.Keyboard.isKeyDown(KEY_CONVERT);
            case "KEY_NOCONVERT": return org.lwjgl.input.Keyboard.isKeyDown(KEY_NOCONVERT);
            case "KEY_YEN": return org.lwjgl.input.Keyboard.isKeyDown(KEY_YEN);
            case "KEY_NUMPADEQUALS": return org.lwjgl.input.Keyboard.isKeyDown(KEY_NUMPADEQUALS);
            case "KEY_CIRCUMFLEX": return org.lwjgl.input.Keyboard.isKeyDown(KEY_CIRCUMFLEX);
            case "KEY_AT": return org.lwjgl.input.Keyboard.isKeyDown(KEY_AT);
            case "KEY_COLON": return org.lwjgl.input.Keyboard.isKeyDown(KEY_COLON);
            case "KEY_UNDERLINE": return org.lwjgl.input.Keyboard.isKeyDown(KEY_UNDERLINE);
            case "KEY_KANJI": return org.lwjgl.input.Keyboard.isKeyDown(KEY_KANJI);
            case "KEY_STOP": return org.lwjgl.input.Keyboard.isKeyDown(KEY_STOP);
            case "KEY_AX": return org.lwjgl.input.Keyboard.isKeyDown(KEY_AX);
            case "KEY_UNLABELED": return org.lwjgl.input.Keyboard.isKeyDown(KEY_UNLABELED);
            case "KEY_NUMPADENTER": return org.lwjgl.input.Keyboard.isKeyDown(KEY_NUMPADENTER);
            case "KEY_RCONTROL": return org.lwjgl.input.Keyboard.isKeyDown(KEY_RCONTROL);
            case "KEY_SECTION": return org.lwjgl.input.Keyboard.isKeyDown(KEY_SECTION);
            case "KEY_NUMPADCOMMA": return org.lwjgl.input.Keyboard.isKeyDown(KEY_NUMPADCOMMA);
            case "KEY_DIVIDE": return org.lwjgl.input.Keyboard.isKeyDown(KEY_DIVIDE);
            case "KEY_SYSRQ": return org.lwjgl.input.Keyboard.isKeyDown(KEY_SYSRQ);
            case "KEY_RMENU": return org.lwjgl.input.Keyboard.isKeyDown(KEY_RMENU);
            case "KEY_FUNCTION": return org.lwjgl.input.Keyboard.isKeyDown(KEY_FUNCTION);
            case "KEY_PAUSE": return org.lwjgl.input.Keyboard.isKeyDown(KEY_PAUSE);
            case "KEY_HOME": return org.lwjgl.input.Keyboard.isKeyDown(KEY_HOME);
            case "KEY_UP": return org.lwjgl.input.Keyboard.isKeyDown(KEY_UP);
            case "KEY_PRIOR": return org.lwjgl.input.Keyboard.isKeyDown(KEY_PRIOR);
            case "KEY_LEFT": return org.lwjgl.input.Keyboard.isKeyDown(KEY_LEFT);
            case "KEY_RIGHT": return org.lwjgl.input.Keyboard.isKeyDown(KEY_RIGHT);
            case "KEY_END": return org.lwjgl.input.Keyboard.isKeyDown(KEY_END);
            case "KEY_DOWN": return org.lwjgl.input.Keyboard.isKeyDown(KEY_DOWN);
            case "KEY_NEXT": return org.lwjgl.input.Keyboard.isKeyDown(KEY_NEXT);
            case "KEY_INSERT": return org.lwjgl.input.Keyboard.isKeyDown(KEY_INSERT);
            case "KEY_DELETE": return org.lwjgl.input.Keyboard.isKeyDown(KEY_DELETE);
            case "KEY_CLEAR": return org.lwjgl.input.Keyboard.isKeyDown(KEY_CLEAR);
            case "KEY_LMETA": return org.lwjgl.input.Keyboard.isKeyDown(KEY_LMETA);
        }
        return false;
    }

}
